#ifndef ceammc_rust_proto_h
#define ceammc_rust_proto_h

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <cstdint>
#include <cstddef>


struct ceammc_obs_client;

struct ceammc_obs_init {
    const char *host;
    const char *password;
    uint16_t port;
};

struct ceammc_callback_msg {
    void *user;
    void (*cb)(void *user, const char *msg);
};

struct ceammc_obs_version {
    uint64_t obs_major;
    uint64_t obs_minor;
    uint64_t obs_patch;
    uint64_t ws_major;
    uint64_t ws_minor;
    uint64_t ws_patch;
    uint32_t rpc_version;
    const char *platform;
    const char *platform_desc;
    const char *const *image_formats;
    size_t image_formats_len;
    const char *const *available_rpc;
    size_t available_rpc_len;
};

struct ceammc_obs_data_scene {
    const char *name;
    const char *uuid;
};

struct ceammc_obs_data_scenes {
    const ceammc_obs_data_scene *current_scene;
};

struct ceammc_obs_data_monitor {
    uint32_t index;
    uint16_t w;
    uint16_t h;
    uint16_t x;
    uint16_t y;
    const char *name;
};

struct ceammc_obs_result_cb {
    /// user data pointer (can be NULL)
    void *user;
    /// version data callback function (can be NULL)
    void (*cb_version)(void *user, const ceammc_obs_version *ver);
    /// scenes data callback function (can be NULL)
    void (*cb_scenes)(void *user, const ceammc_obs_data_scenes *ver);
    /// monitors data callback function (can be NULL)
    void (*cb_monitors)(void *user, const ceammc_obs_data_monitor *mons, size_t len);
    void (*cb_current_scene)(void *user, const char *name);
    /// connected/disconnected callback function (can be NULL)
    void (*cb_connected)(void *user, bool state);
};

struct ceammc_callback_notify {
    size_t id;
    void (*cb)(size_t id);
};


extern "C" {

/// free OBS Studio client
/// @param cli - pointer to obs client
void ceammc_obs_free(ceammc_obs_client *cli);

/// get current OBS scene
/// @param cli - pointer to obs client
/// @return true on success, false on error
bool ceammc_obs_get_current_scene(ceammc_obs_client *cli);

/// send version request to OBS studio
/// @param cli - pointer to obs client
void ceammc_obs_get_version(ceammc_obs_client *cli);

/// request list of OBS studio monitors
/// @param cli - pointer to obs client
void ceammc_obs_list_monitors(ceammc_obs_client *cli);

/// send version request to OBS studio
/// @param cli - pointer to obs client
void ceammc_obs_list_scenes(ceammc_obs_client *cli);

/// create OSB Studio client
/// @param params - connection params
/// @param cb_err - callback for error messages
/// @param cb_post - callback for post messages
/// @param cb_debug - callback for debug messages
/// @param cb_log - callback for log messages
/// @param cb_reply - reply callbacks
/// @param cb_notify - notification callback
/// @return pointer to obs client or NULL on error
ceammc_obs_client *ceammc_obs_new(ceammc_obs_init params,
                                  ceammc_callback_msg cb_err,
                                  ceammc_callback_msg cb_post,
                                  ceammc_callback_msg cb_debug,
                                  ceammc_callback_msg cb_log,
                                  ceammc_obs_result_cb cb_reply,
                                  ceammc_callback_notify cb_notify);

/// move to next OBS scene
/// @param cli - pointer to obs client
/// @return true on success, false on error
bool ceammc_obs_next_scene(ceammc_obs_client *cli);

/// process all available results from OBS studio
/// @param cli - pointer to obs client client
/// @return true on success, false on error
bool ceammc_obs_process_events(ceammc_obs_client *cli);

/// set current scene
/// @param cli - pointer to obs client
/// @param name - scene name
/// @return true on success, false on error
bool ceammc_obs_set_current_scene(ceammc_obs_client *cli, const char *name);

/// init rust env_logger
/// logger config is done with a RUST_LOG env variable
void ceammc_proto_log_init();

} // extern "C"

#endif // ceammc_rust_proto_h
