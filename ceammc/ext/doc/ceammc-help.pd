#N canvas 0 0 760 555 12;
#X text 30 50 The general purpose Pd library used for work and educational
process in the Centre of ElectroAcoustic Music of Moscow Conservatory
(CEAM).;
#X obj 20 105 cnv 5 28 32 empty empty an 4 16 0 17 -262144 -49933 0;
#X obj 20 147 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 158 an.onset;
#X text 200 158 onset detector for arrays;
#X obj 30 186 an.onset~;
#X text 200 186 onset detector;
#X obj 30 214 an.pitchtrack~;
#X text 200 214 pitch tracker;
#X obj 30 242 an.rms~;
#X text 200 242 root mean square with moving-average algorithm.;
#X obj 30 270 an.tempo~;
#X text 200 270 tempo detector;
#X obj 30 298 an.zero~;
#X text 200 298 zero crossing count/rate/freq calculator;
#X obj 20 326 cnv 5 59 32 empty empty array 4 16 0 17 -262144 -49933
0;
#X obj 20 368 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 379 array.bpm;
#X text 200 379 BPM calculator;
#X obj 30 407 array.circular;
#X text 200 407 array read/write as circular buffer;
#X obj 30 435 array.circular~;
#X text 200 435 circular buffer for arrays;
#X obj 30 463 array.convolve;
#X text 200 463 array FFT convolution;
#X obj 30 491 array.copy;
#X text 200 491 copy samples from one array to another;
#X obj 30 519 array.do;
#X text 200 519 iterate and modify array content via side-chain;
#X obj 30 547 array.each;
#X text 200 547 process each array elements via side-chain;
#X obj 30 575 array.fill;
#X text 200 575 fill array with single value \, pattern or function;
#X obj 30 603 array.grainer~;
#X text 200 603 array granulator;
#X obj 30 631 array.hist;
#X text 200 631 calculates array histogram;
#X obj 30 659 array.ltcplay~;
#X text 200 659 array player controlled by LTC;
#X obj 30 687 array.mean;
#X text 200 687 calculates array arithmetic mean value;
#X obj 30 715 array.minmax;
#X text 200 715 find array min and max element value;
#X obj 30 743 array.play~;
#X text 200 743 array player with variable speed and amplitude;
#X obj 30 771 array.plot;
#X text 200 771 array data plotter;
#X obj 30 799 array.plot~;
#X text 200 799 plot signal on specified array;
#X obj 30 827 array.readwrite~;
#X text 200 827 array reader/writer;
#X obj 30 855 array.resample;
#X text 200 855 array resampler;
#X obj 30 883 array.rms;
#X text 200 883 calculates root mean square value for array;
#X obj 30 911 array.set;
#X text 200 911 set array content from list;
#X obj 30 939 array.stddev;
#X text 200 939 calculates standard deviation for array values;
#X obj 30 967 array.stretch;
#X text 200 967 array time-stretch \, pitch-shift or rate-change;
#X obj 30 995 array.sum;
#X text 200 995 calculates sum of array elements;
#X obj 30 1023 array.sum2;
#X text 200 1023 calculates sum of squares of array elements;
#X obj 30 1051 array.tramp~;
#X text 200 1051 triggered ramp generator for array;
#X obj 30 1079 array.variance;
#X text 200 1079 calculates variance of array values;
#X obj 30 1107 array.vplay;
#X text 200 1107 simple array player for using with vline~;
#X obj 30 1135 array.window;
#X text 200 1135 fill array with window;
#X obj 30 1163 plot.geomspace~;
#X text 200 1163 outputs numbers spaced evenly on a log scale (a geometric
progression);
#X obj 30 1203 plot.hist~;
#X text 200 1203 calculate and output signal histogram;
#X obj 30 1231 plot.linspace~;
#X text 200 1231 outputs numbers spaced evenly spaced over a specified
interval;
#X obj 30 1271 plot.logspace~;
#X text 200 1271 outputs numbers spaced evenly on a log scale;
#X obj 30 1299 plot.response~;
#X text 200 1299 output amp/phase freq response to impulse;
#X obj 20 1327 cnv 5 48 32 empty empty base 4 16 0 17 -262144 -49933
0;
#X obj 20 1369 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1380 ceammc.search;
#X text 200 1380 ceammc library search object;
#X obj 30 1408 chrono.datetime;
#X text 200 1408 output current date and time info;
#X obj 30 1436 convolve~;
#X text 200 1436 realtime FFT convolution;
#X obj 30 1467 ui.link @title [function] @url function-help.pd;
#X text 200 1464 named function;
#X obj 30 1489 function.call;
#X text 200 1489 call named function;
#X obj 30 1517 gain~;
#X text 200 1517 multislot signal gain;
#X obj 30 1545 gate~;
#X text 200 1545 multislot signal gate;
#X obj 30 1573 logger;
#X text 200 1573 advanced data logger;
#X obj 30 1601 matrix~;
#X text 200 1601 signal routing matrix;
#X obj 30 1629 merge~;
#X text 200 1629 parametrized signal merge;
#X obj 30 1657 metro.choice;
#X text 200 1657 metro with random choice from timeset;
#X obj 30 1685 metro.pattern;
#X text 200 1685 metro with rhythmic patterns;
#X obj 30 1713 metro.random;
#X text 200 1713 metro random bang with specified range;
#X obj 30 1741 metro.seq;
#X text 200 1741 metro sequencer;
#X obj 30 1769 metro.wchoice;
#X text 200 1769 metro with weighted random choice from timeset;
#X obj 30 1797 mix~;
#X text 200 1797 multislot signal mixer;
#X obj 30 1825 nsig~;
#X text 200 1825 Mulitchannel converter from control to audio rate;
#X obj 30 1853 obj.props;
#X text 200 1853 property extractor;
#X obj 30 1881 radio;
#X text 200 1881 float index to outlet values as radio switch;
#X obj 30 1909 split~;
#X text 200 1909 parametrized signal splitter;
#X obj 30 1937 spring;
#X text 200 1937 float value "spring";
#X obj 30 1965 sync;
#X text 200 1965 value synchronization;
#X obj 30 1993 window;
#X text 200 1993 returns window value by given window position;
#X obj 30 2021 xdac~;
#X text 200 2021 dac~ with channel ranges;
#X obj 30 2049 xfade2~;
#X text 200 2049 multi stereo-signal crossfade;
#X obj 30 2077 xfade~;
#X text 200 2077 multi signal crossfade;
#X obj 30 2105 z~;
#X text 200 2105 sample delay;
#X obj 20 2133 cnv 5 58 32 empty empty chaos 4 16 0 17 -262144 -49933
0;
#X obj 20 2175 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2186 chaos.gbman0;
#X text 200 2186 Gingerbreadman map chaotic generator;
#X obj 30 2214 chaos.gbman0~;
#X text 200 2214 Gingerbreadman map chaotic generator;
#X obj 30 2242 chaos.jong;
#X text 200 2242 Peter de Jong attractor;
#X obj 30 2270 chaos.logistic;
#X text 200 2270 Logistic map chaotic generator;
#X obj 30 2298 chaos.std0;
#X text 200 2298 Standard map chaotic generator;
#X obj 30 2326 chaos.std0~;
#X text 200 2326 Standard map chaotic generator;
#X obj 20 2354 cnv 5 48 32 empty empty conv 4 16 0 17 -262144 -49933
0;
#X obj 20 2396 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2407 array.p2s;
#X text 200 2407 convert array phase [0\..1] to sample position;
#X obj 30 2435 array.s2p;
#X text 200 2435 convert sample position to phase range [0\..1];
#X obj 30 2463 conv.amp2dbfs;
#X text 200 2463 convert from amplitude to decibel full scale;
#X obj 30 2491 conv.amp2dbfs~;
#X text 200 2491 convert from amplitude to decibel full scale;
#X obj 30 2519 conv.bar2ms;
#X text 200 2519 calculate bar and beat duration;
#X obj 30 2547 conv.bits2bang;
#X text 200 2547 convert list of bits to bang events;
#X obj 30 2575 conv.bits2int;
#X text 200 2575 convert list of bits to integer;
#X obj 30 2603 conv.bits2note;
#X text 200 2603 convert list of bits to note events;
#X obj 30 2631 conv.bits2pos;
#X text 200 2631 convert list of bits to list of bit position;
#X obj 30 2659 conv.bpm2hz;
#X text 200 2659 converts BPM to frequency in hertz;
#X obj 30 2687 conv.bpm2ms;
#X text 200 2687 convert frequency in BPM to period in milliseconds;
#X obj 30 2715 conv.bpm2sec;
#X text 200 2715 convert frequency in BPM to period in seconds;
#X obj 30 2743 conv.car2pol;
#X text 200 2743 convert cartesian coords to polar;
#X obj 30 2771 conv.cc2amp;
#X text 200 2771 convert from MIDI Control Change range;
#X obj 30 2799 conv.char2morse;
#X text 200 2799 convert character to morse code;
#X obj 30 2827 conv.color2rgba;
#X text 200 2827 convert named or hex color to separate RGBA values;
#X obj 30 2855 conv.dbfs2amp;
#X text 200 2855 convert decibel full scale to amplitude;
#X obj 30 2883 conv.dbfs2amp~;
#X text 200 2883 convert decibel full scale to amplitude;
#X obj 30 2911 conv.degree2key;
#X text 200 2911 convert scale degree to key;
#X obj 30 2939 conv.edge2bang;
#X text 200 2939 edge detector for numeric stream;
#X obj 30 2967 conv.guido2note;
#X text 200 2967 convert Guido notation into MIDI and duration;
#X obj 30 2995 conv.hex2int;
#X text 200 2995 hex symbol to int value;
#X obj 30 3023 conv.hsl2rgb;
#X text 200 3023 convert HSL color values to RGB;
#X obj 30 3051 conv.int2bits;
#X text 200 3051 convert integer to list of bits;
#X obj 30 3079 conv.lab2rgb;
#X text 200 3079 convert LAB color values to RGB;
#X obj 30 3107 conv.lin2curve;
#X text 200 3107 map linear to exponential range with 0 allowed.;
#X obj 30 3135 conv.lin2exp;
#X text 200 3135 maps linear range to exponential range;
#X obj 30 3163 conv.lin2lin;
#X text 200 3163 convert from one linear range to another;
#X obj 30 3191 conv.lin2lin~;
#X text 200 3191 convert from one linear range to another for signals;
#X obj 30 3219 conv.list2props;
#X text 200 3219 converts list to series of property messages;
#X obj 30 3247 conv.midi2freq;
#X text 200 3247 convert from midi pitch to frequency in hz (with various
base A and temperament);
#X obj 30 3287 conv.ms2bpm;
#X text 200 3287 convert period in milliseconds to frequency in BPM;
#X obj 30 3315 conv.ms2samp;
#X text 200 3315 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 3355 conv.ms2samp~;
#X text 200 3355 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 3395 conv.ms2str;
#X text 200 3395 converts float time in milliseconds to formated symbol
(or string);
#X obj 30 3435 conv.note2guido;
#X text 200 3435 convert MIDI note to Guido notation;
#X obj 30 3463 conv.phase2rad;
#X text 200 3463 convert phase value [0-1] to radians [0-2π];
#X obj 30 3491 conv.phase2rad~;
#X text 200 3491 convert phase value [0-1] to radians [0-2π];
#X obj 30 3519 conv.pitch2midi;
#X text 200 3519 converts symbol pitch name to MIDI note number;
#X obj 30 3547 conv.pol2car;
#X text 200 3547 convert from polar coordinates to cartesian;
#X obj 30 3575 conv.rad2phase;
#X text 200 3575 convert radians value to phase;
#X obj 30 3603 conv.rad2phase~;
#X text 200 3603 convert radians value to phase;
#X obj 30 3631 conv.rgb2hex;
#X text 200 3631 convert separate RGB values to hex color;
#X obj 30 3659 conv.samp2ms;
#X text 200 3659 convert samples to time according to samplerate;
#X obj 30 3687 conv.samp2ms~;
#X text 200 3687 convert samples to milliseconds according to samplerate;
#X obj 30 3715 conv.samp2sec;
#X text 200 3715 convert samples to time according to samplerate;
#X obj 30 3743 conv.sec2bpm;
#X text 200 3743 convert period in seconds to frequency in BPM;
#X obj 30 3771 conv.sec2samp;
#X text 200 3771 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 3811 conv.sec2str;
#X text 200 3811 converts float time in seconds to formated symbol
(or string);
#X obj 30 3839 conv.semi2ratio;
#X text 200 3839 convert interval in semitones to frequency ratio in
12-ET;
#X obj 30 3867 conv.sig2float~;
#X text 200 3867 convert signal to floats;
#X obj 30 3895 conv.str2sec;
#X text 200 3895 converts formatted time to float value in seconds;
#X obj 30 3923 music.dur2time;
#X text 200 3923 convert duration list to time;
#X obj 30 3951 music.voice2midi;
#X text 200 3951 convert voice music list of midi pitches;
#X obj 20 3979 cnv 5 48 32 empty empty data 4 16 0 17 -262144 -49933
0;
#X obj 20 4021 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4032 color.mix;
#X text 200 4032 color mixer;
#X obj 30 4060 color.scale;
#X text 200 4060 create color scales;
#X obj 30 4088 data.bimap;
#X text 200 4088 bidirectional map container;
#X obj 30 4116 data.color;
#X text 200 4116 Color datatype;
#X obj 30 4144 data.copy;
#X text 200 4144 make copy for any data types: MList \, Set etc...;
#X obj 30 4172 data.dict;
#X text 200 4172 dictionary container: store values by key;
#X obj 30 4200 data.fifo;
#X text 200 4200 First-In-First-Out (FIFO) queue data container;
#X obj 30 4228 data.float;
#X text 200 4228 robust float object;
#X obj 30 4256 data.int;
#X text 200 4256 robust int object;
#X obj 30 4284 data.list;
#X text 200 4284 list container;
#X obj 30 4312 data.mlist;
#X text 200 4312 multidimensional list container;
#X obj 30 4340 data.set;
#X text 200 4340 container that store unique elements;
#X obj 30 4368 data.set2list;
#X text 200 4368 converts set to list;
#X obj 30 4396 dict.contains;
#X text 200 4396 predicate to check if dict contains a keys;
#X obj 30 4424 dict.each;
#X text 200 4424 map each value in dict;
#X obj 30 4452 dict.from_list;
#X text 200 4452 creates dictionary from list;
#X obj 30 4480 dict.get;
#X text 200 4480 output dict values;
#X obj 30 4508 dict.keys;
#X text 200 4508 get list of dict keys;
#X obj 30 4536 dict.pass;
#X text 200 4536 passes specified keys in dict;
#X obj 30 4564 dict.reject;
#X text 200 4564 rejects specified keys from dict;
#X obj 30 4592 dict.size;
#X text 200 4592 dictionary size;
#X obj 30 4620 dict.to_list;
#X text 200 4620 converts dictionary to plain list;
#X obj 30 4648 dict.values;
#X text 200 4648 dictionary values as mlist;
#X obj 30 4676 global.bimap;
#X text 200 4676 Global visibility bidirectional map container;
#X obj 30 4704 local.bimap;
#X text 200 4704 local to patch bidirectional map container;
#X obj 30 4732 mlist.flatten;
#X text 200 4732 flatten nested mlist;
#X obj 30 4760 rtree.to_list;
#X text 200 4760 convert OpenMusic-like rhythm tree to list of fractions;
#X obj 30 4788 set.contains;
#X text 200 4788 check if specified element is in set;
#X obj 30 4816 set.diff;
#X text 200 4816 difference between two sets;
#X obj 30 4844 set.equal;
#X text 200 4844 checks if two sets are equal (contains same elements);
#X obj 30 4872 set.intersect;
#X text 200 4872 output intersection of given sets;
#X obj 30 4900 set.size;
#X text 200 4900 get number of elements in set;
#X obj 30 4928 set.symdiff;
#X text 200 4928 symmetric difference between two sets;
#X obj 30 4956 set.union;
#X text 200 4956 output union of given sets;
#X obj 20 4984 cnv 5 38 32 empty empty dyn 4 16 0 17 -262144 -49933 0;
#X obj 20 5026 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5037 dyn.comp2~;
#X text 200 5037 stereo dynamic range compressor;
#X obj 30 5065 dyn.comp_peak2~;
#X text 200 5065 stereo peak feed forward compressor with channel linking;
#X obj 30 5093 dyn.comp_peak~;
#X text 200 5093 mono dynamic range peak feed forward compressor;
#X obj 30 5121 dyn.comp_up2~;
#X text 200 5121 stereo upward compressor with channel linking;
#X obj 30 5149 dyn.comp_up~;
#X text 200 5149 mono upward compressor;
#X obj 30 5177 dyn.comp~;
#X text 200 5177 mono dynamic range compressors;
#X obj 30 5205 dyn.expand2~;
#X text 200 5205 stereo dynamic range expander with channel linking;
#X obj 30 5233 dyn.expand~;
#X text 200 5233 mono dynamic range expander;
#X obj 30 5261 dyn.gate2~;
#X text 200 5261 stereo signal gate;
#X obj 30 5289 dyn.gate~;
#X text 200 5289 mono signal gate;
#X obj 30 5317 dyn.limit2~;
#X text 200 5317 stereo 1176LN Peak Limiter;
#X obj 30 5345 dyn.limit~;
#X text 200 5345 mono 1176LN Peak Limiter;
#X obj 30 5373 dyn.softclip~;
#X text 200 5373 soft signal clip;
#X obj 20 5401 cnv 5 39 32 empty empty env 4 16 0 17 -262144 -49933 0;
#X obj 20 5443 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5454 env.adsr~;
#X text 200 5454 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 5482 env.ar~;
#X text 200 5482 Attack/Release envelope generator;
#X obj 30 5510 env.asr2~;
#X text 200 5510 stereo Attack/Sustain/Release envelope generator;
#X obj 30 5538 env.asr~;
#X text 200 5538 Attack/Sustain/Release envelope generator;
#X obj 30 5566 env.concat;
#X text 200 5566 Envelope concatenation;
#X obj 30 5594 env.follow~;
#X text 200 5594 Envelope follower with independent attack and release
times;
#X obj 30 5622 env.mix;
#X text 200 5622 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 5662 env.smooth~;
#X text 200 5662 An envelope with an exponential attack and release;
#X obj 30 5690 env.tscale;
#X text 200 5690 Envelope time-scale;
#X obj 30 5718 env.tshift;
#X text 200 5718 Envelope time-shift (horizontal);
#X obj 30 5746 env.vscale;
#X text 200 5746 Envelope value-scale;
#X obj 30 5774 env2array;
#X text 200 5774 Renders envelope to specified array;
#X obj 30 5802 env2vline;
#X text 200 5802 Converts envelope to bunch of vline messages;
#X obj 30 5830 envelope;
#X text 200 5830 Envelope data type;
#X obj 30 5858 vline2env;
#X text 200 5858 Converts vline messages to env;
#X obj 20 5886 cnv 5 49 32 empty empty flow 4 16 0 17 -262144 -49933
0;
#X obj 20 5928 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5939 expand_env;
#X text 200 5939 Substitute environment variables in data stream;
#X obj 30 5967 flow.append;
#X text 200 5967 append message to flow stream;
#X obj 30 5995 flow.change;
#X text 200 5995 rejects redundant input values;
#X obj 30 6023 flow.count;
#X text 200 6023 control flow event counter;
#X obj 30 6051 flow.delay;
#X text 200 6051 enhanced version on vanilla delay object;
#X obj 30 6079 flow.demultiplex;
#X text 200 6079 control flow demultiplexer;
#X obj 30 6107 flow.demultiplex2~;
#X text 200 6107 audio stream stereo demultiplexer;
#X obj 30 6135 flow.demultiplex~;
#X text 200 6135 audio stream demultiplexer;
#X obj 30 6163 flow.dollar;
#X text 200 6163 data flow dollar converter;
#X obj 30 6191 flow.dup;
#X text 200 6191 message duplicator;
#X obj 30 6219 flow.float;
#X text 200 6219 pass floats;
#X obj 30 6247 flow.gate;
#X text 200 6247 control flow gate. [spigot] analog;
#X obj 30 6275 flow.greater;
#X text 200 6275 numeric stream router;
#X obj 30 6303 flow.greater_eq;
#X text 200 6303 numeric stream router;
#X obj 30 6331 flow.group;
#X text 200 6331 group input atoms in list of specified size;
#X obj 30 6359 flow.histogram;
#X text 200 6359 control flow histogram;
#X obj 30 6387 flow.interval;
#X text 200 6387 measure time between flow events;
#X obj 30 6415 flow.less;
#X text 200 6415 numeric stream router \, like many [moses];
#X obj 30 6443 flow.less_eq;
#X text 200 6443 numeric stream router \, like many [moses];
#X obj 30 6471 flow.list2many;
#X text 200 6471 routes list element with message selectors;
#X obj 30 6499 flow.match;
#X text 200 6499 route data flow by regexp match;
#X obj 30 6527 flow.mem;
#X text 200 6527 store data flow in memory;
#X obj 30 6555 flow.multiplex;
#X text 200 6555 control flow multiplexer;
#X obj 30 6583 flow.multiplex2~;
#X text 200 6583 audio stream stereo multiplexer;
#X obj 30 6611 flow.multiplex~;
#X text 200 6611 audio stream multiplexer;
#X obj 30 6639 flow.once;
#X text 200 6639 one message pass thru;
#X obj 30 6667 flow.pack;
#X text 200 6667 flow pack;
#X obj 30 6695 flow.pass;
#X text 200 6695 pass specified values;
#X obj 30 6723 flow.pass_if;
#X text 200 6723 pass values that accepted by predicate object;
#X obj 30 6751 flow.pipe;
#X text 200 6751 enhanced version on vanilla pipe object;
#X obj 30 6779 flow.prepend;
#X text 200 6779 prepend message before received one;
#X obj 30 6807 flow.queue;
#X text 200 6807 multi-channel control flow sync queue (or FIFO);
#X obj 30 6835 flow.record;
#X text 200 6835 flow stream recorder/player;
#X obj 30 6863 flow.reject;
#X text 200 6863 reject specified values;
#X obj 30 6891 flow.reject_if;
#X text 200 6891 reject values by predicate;
#X obj 30 6919 flow.ring;
#X text 200 6919 dataflow ring buffer;
#X obj 30 6947 flow.route;
#X text 200 6947 advanced message router;
#X obj 30 6975 flow.select;
#X text 200 6975 vanilla flow on steroids;
#X obj 30 7003 flow.seqdelay;
#X text 200 7003 sequential delay/router for input flow;
#X obj 30 7031 flow.space;
#X text 200 7031 space in time messages received at the same logical
time;
#X obj 30 7059 flow.speedlim;
#X text 200 7059 control stream speed limiter;
#X obj 30 7087 flow.split;
#X text 200 7087 split data flow by external side-chain predicate;
#X obj 30 7115 flow.stack;
#X text 200 7115 any message stack;
#X obj 30 7143 flow.sync;
#X text 200 7143 bus with only hot inlets;
#X obj 30 7171 flow.sync_pack;
#X text 200 7171 flow pack with all hot inlets;
#X obj 30 7199 flow.tee~;
#X text 200 7199 separate audio and control streams;
#X obj 30 7227 replace;
#X text 200 7227 Replace atoms in data stream;
#X obj 30 7255 route.any;
#X text 200 7255 separate any messages from bangs \, floats \, symbols
and lists;
#X obj 30 7283 route.bang;
#X text 200 7283 separate bang messages from other types;
#X obj 30 7311 route.cycle;
#X text 200 7311 cyclic message router;
#X obj 30 7339 route.data;
#X text 200 7339 separate any messages from bangs \, floats \, symbols
and lists;
#X obj 30 7367 route.float;
#X text 200 7367 separate float messages from other types;
#X obj 30 7395 route.list;
#X text 200 7395 separate list messages from other types;
#X obj 30 7423 route.prop;
#X text 200 7423 separate property messages from other types;
#X obj 30 7451 route.random;
#X text 200 7451 routes input flow to random outlet;
#X obj 30 7479 route.symbol;
#X text 200 7479 separate symbol messages from other types;
#X obj 20 7507 cnv 5 37 32 empty empty flt 4 16 0 17 -262144 -49933 0;
#X obj 20 7549 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7560 flt.a-weight;
#X text 200 7560 convert frequency to A-weight value;
#X obj 30 7588 flt.biquad~;
#X text 200 7588 second order IIR filter.;
#X obj 30 7616 flt.bpf12~;
#X text 200 7616 Two pole band-pass butterworth filter;
#X obj 30 7644 flt.bpf24~;
#X text 200 7644 Four pole band-pass butterworth filter;
#X obj 30 7672 flt.bpf36e~;
#X text 200 7672 elliptic band-pass filter with -36db rolloff;
#X obj 30 7700 flt.bpf72e~;
#X text 200 7700 elliptic band-pass filter with -72db rolloff;
#X obj 30 7728 flt.c_apf;
#X text 200 7728 Allpass filter coefficient calculator for biquad;
#X obj 30 7756 flt.c_bpf~;
#X text 200 7756 BPF coefficient calculator for biquad filter;
#X obj 30 7784 flt.c_highshelf~;
#X text 200 7784 Highshelf filter coefficient calculator for biquad;
#X obj 30 7812 flt.c_hpf;
#X text 200 7812 HPF coefficient calculator for biquad filter;
#X obj 30 7840 flt.c_hpf~;
#X text 200 7840 HPF coefficient calculator for biquad filter;
#X obj 30 7868 flt.c_lowshelf~;
#X text 200 7868 Lowshelf filter coefficient calculator for biquad;
#X obj 30 7896 flt.c_lpf;
#X text 200 7896 LPF coefficient calculator for biquad filter;
#X obj 30 7924 flt.c_lpf~;
#X text 200 7924 LPF coefficient calculator for biquad filter;
#X obj 30 7952 flt.c_notch;
#X text 200 7952 Notch filter coefficient calculator for biquad;
#X obj 30 7980 flt.c_notch~;
#X text 200 7980 Band-reject coefficient calculator for biquad filter;
#X obj 30 8008 flt.c_peak~;
#X text 200 8008 Peaking equalizer calculator for biquad;
#X obj 30 8036 flt.c_pole;
#X text 200 8036 One-pole coefficient calculator for biquad filter;
#X obj 30 8064 flt.dcblock2~;
#X text 200 8064 stereo DC blocker;
#X obj 30 8092 flt.dcblock~;
#X text 200 8092 mono DC blocker;
#X obj 30 8120 flt.eq10~;
#X text 200 8120 graphic 10 band equalizer;
#X obj 30 8148 flt.eq_peak_cq~;
#X text 200 8148 constant-Q second order peaking equalizer section;
#X obj 30 8176 flt.eq_peak~;
#X text 200 8176 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer" section.;
#X obj 30 8231 flt.fb_comb~;
#X text 200 8231 feedback comb filter;
#X obj 30 8259 flt.fbank5x1~;
#X text 200 8259 5 band one octave butterworth filterbank;
#X obj 30 8287 flt.ff_comb~;
#X text 200 8287 feed forward comb filter;
#X obj 30 8315 flt.freqz;
#X text 200 8315 compute the frequency response of a digital filter;
#X obj 30 8343 flt.freqz~;
#X text 200 8343 compute the frequency response of a digital filter;
#X obj 30 8371 flt.highshelf~;
#X text 200 8371 gain boost|cut above some frequency;
#X obj 30 8399 flt.hpf12~;
#X text 200 8399 High-pass second order Butterworth filter;
#X obj 30 8427 flt.hpf24~;
#X text 200 8427 High-pass fourth order Butterworth filter;
#X obj 30 8455 flt.lowshelf~;
#X text 200 8455 gain boost|cut below some frequency;
#X obj 30 8483 flt.lpf12~;
#X text 200 8483 Low-pass second order Butterworth filter;
#X obj 30 8511 flt.lpf24~;
#X text 200 8511 Low-pass fourth order Butterworth filter;
#X obj 30 8539 flt.median;
#X text 200 8539 Median control flow filter;
#X obj 30 8567 flt.moog_vcf~;
#X text 200 8567 Moog Voltage Controlled Filter;
#X obj 30 8595 flt.notch~;
#X text 200 8595 band-rejection filter;
#X obj 30 8623 flt.resonbp~;
#X text 200 8623 Simple resonant bandpass filter;
#X obj 30 8651 flt.resonhp~;
#X text 200 8651 Simple resonant highpass filter;
#X obj 30 8679 flt.resonlp~;
#X text 200 8679 Simple resonant lowpass filter;
#X obj 30 8707 flt.speaker~;
#X text 200 8707 speaker emulation band-pass filter;
#X obj 20 8735 cnv 5 28 32 empty empty fx 4 16 0 17 -262144 -49933 0;
#X obj 20 8777 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8788 fx.bitdown~;
#X text 200 8788 bit downer and downsampler effect;
#X obj 30 8816 fx.chorus~;
#X text 200 8816 Chorus effect;
#X obj 30 8844 fx.dattorro~;
#X text 200 8844 dattorro reverb;
#X obj 30 8872 fx.delay~;
#X text 200 8872 smooth delay with a feedback control;
#X obj 30 8900 fx.distortion1~;
#X text 200 8900 distortion #1 from Guitarix effects set;
#X obj 30 8928 fx.distortion2~;
#X text 200 8928 distortion #2 from Guitarix effects set;
#X obj 30 8956 fx.distortion3~;
#X text 200 8956 simple distortion #3 from Guitarix effects set;
#X obj 30 8984 fx.distortion~;
#X text 200 8984 cubic nonlinearity distortion;
#X obj 30 9012 fx.drive~;
#X text 200 9012 Guitarix drive effect;
#X obj 30 9040 fx.drone_box~;
#X text 200 9040 mono sympathetic resonance generator;
#X obj 30 9068 fx.echo2~;
#X text 200 9068 stereo echo effect;
#X obj 30 9096 fx.echo~;
#X text 200 9096 enhanced echo effect;
#X obj 30 9124 fx.flanger~;
#X text 200 9124 mono flanging effect;
#X obj 30 9152 fx.freeverb2~;
#X text 200 9152 freeverb2 - stereo version of freeverb;
#X obj 30 9180 fx.freeverb~;
#X text 200 9180 freeverb - common used open-source reverb;
#X obj 30 9208 fx.freqshift~;
#X text 200 9208 frequency shifter or single-sideband ring modulation;
#X obj 30 9236 fx.granulator~;
#X text 200 9236 simple input stream granulator;
#X obj 30 9264 fx.greyhole~;
#X text 200 9264 A complex echo-like effect;
#X obj 30 9292 fx.infrev~;
#X text 200 9292 port of Infinity VST plugin from airwindows;
#X obj 30 9320 fx.jcrev~;
#X text 200 9320 Schroeder quad reverberator from 1972;
#X obj 30 9348 fx.looper~;
#X text 200 9348 One track looper;
#X obj 30 9376 fx.overdrive~;
#X text 200 9376 overdrive effect;
#X obj 30 9404 fx.pitchshift_s~;
#X text 200 9404 signal version of fx.pitchshift~;
#X obj 30 9432 fx.pitchshift~;
#X text 200 9432 simple pitch shifter based on 2 delay lines;
#X obj 30 9460 fx.rb_pitchshift~;
#X text 200 9460 rubber band pitchshift;
#X obj 30 9488 fx.recho~;
#X text 200 9488 reversed echo effect;
#X obj 30 9516 fx.ringmod~;
#X text 200 9516 ring modulator effect;
#X obj 30 9544 fx.room~;
#X text 200 9544 Gardners room emulation algorithms;
#X obj 30 9572 fx.satrev~;
#X text 200 9572 Schroeder reverberator from 1971;
#X obj 30 9600 fx.scramble~;
#X text 200 9600 scramble delayed sound fragments;
#X obj 30 9628 fx.shimmer~;
#X text 200 9628 shimmer reverb effect effect;
#X obj 30 9656 fx.stutter~;
#X text 200 9656 stutter effect;
#X obj 30 9684 fx.tapiir~;
#X text 200 9684 multi-tap delay;
#X obj 30 9712 fx.tremolo~;
#X text 200 9712 tremolo effect from guitarix project;
#X obj 30 9740 fx.vocoder~;
#X text 200 9740 very simple vocoder where the spectrum of the modulation
signal is analyzed using a 32-band filter bank;
#X obj 30 9780 fx.wahwah~;
#X text 200 9780 digitized CryBaby wah pedal;
#X obj 30 9808 fx.zita_rev1~;
#X text 200 9808 Zita stereo reverb;
#X obj 20 9836 cnv 5 69 32 empty empty global 4 16 0 17 -262144 -49933
0;
#X obj 20 9878 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9889 global.dict;
#X text 200 9889 global named dict object;
#X obj 30 9917 global.float;
#X text 200 9917 global named float object;
#X obj 30 9945 global.int;
#X text 200 9945 global named integer object;
#X obj 30 9973 global.list;
#X text 200 9973 global named list object;
#X obj 30 10001 global.mlist;
#X text 200 10001 global named mlist object;
#X obj 30 10029 global.set;
#X text 200 10029 global named set object;
#X obj 20 10057 cnv 5 29 32 empty empty hw 4 16 0 17 -262144 -49933 0;
#X obj 20 10099 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10110 hw.apple_smc;
#X text 200 10110 query the system management control in Apples;
#X obj 30 10138 hw.apple_sms;
#X text 200 10138 query the sudden motion sensor in Apples;
#X obj 30 10166 hw.arduino;
#X text 200 10166 Arduino device;
#X obj 30 10194 hw.display;
#X text 200 10194 get/set display properties;
#X obj 30 10222 hw.gamepad;
#X text 200 10222 gamepad controller;
#X obj 30 10250 hw.gpio;
#X text 200 10250 Raspberry Pi GPIO support;
#X obj 30 10278 hw.kbd_light;
#X text 200 10278 Get/set keyboard light on some devices;
#X obj 30 10306 hw.motu.avb;
#X text 200 10306 controls Motu AVB devices over http requests;
#X obj 30 10334 hw.printer;
#X text 200 10334 Basic printing support;
#X obj 30 10362 hw.sensor.sr04;
#X text 200 10362 HC-SR04 ulatrasonic ranging module;
#X obj 30 10390 hw.serial;
#X text 200 10390 serial port device;
#X obj 30 10418 hw.spi.max7219;
#X text 200 10418 LED display driver based on max7219 chip;
#X obj 20 10446 cnv 5 47 32 empty empty lang 4 16 0 17 -262144 -49933
0;
#X obj 20 10488 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10502 ui.link @title [lang.faust~] @url lang.faust~-help.pd;
#X text 200 10499 faust realtime compilation;
#X obj 30 10524 lang.lua;
#X text 200 10524 Lua JIT language bindings;
#X obj 30 10555 ui.link @title [ui.faust~] @url ui.faust~-help.pd;
#X text 200 10552 faust compiled ui object;
#X obj 20 10577 cnv 5 38 32 empty empty lfo 4 16 0 17 -262144 -49933
0;
#X obj 20 10619 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10630 lfo.+pulse~;
#X text 200 10630 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 10658 lfo.+saw~;
#X text 200 10658 Positive unit-amplitude low frequency saw wave;
#X obj 30 10686 lfo.+square~;
#X text 200 10686 Positive low frequency square wave;
#X obj 30 10714 lfo.+tri~;
#X text 200 10714 Positive unit-amplitude low frequency triangle wave;
#X obj 30 10742 lfo.impulse~;
#X text 200 10742 Unit-amplitude low-frequency impulse train;
#X obj 30 10770 lfo.mosc~;
#X text 200 10770 multi-oscillator with various waveforms;
#X obj 30 10798 lfo.pulse~;
#X text 200 10798 Full-range unit-amplitude low frequency pulse train;
#X obj 30 10826 lfo.saw~;
#X text 200 10826 Full-range unit-amplitude low frequency saw;
#X obj 30 10854 lfo.square~;
#X text 200 10854 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 10882 lfo.tri~;
#X text 200 10882 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 10910 cnv 5 47 32 empty empty list 4 16 0 17 -262144 -49933
0;
#X obj 20 10952 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 10963 list.^at;
#X text 200 10963 on input index(es) outputs list element(s);
#X obj 30 10991 list.^contains;
#X text 200 10991 checks if input atom is found in the list;
#X obj 30 11019 list.^search;
#X text 200 11019 on input atom returns it index in list;
#X obj 30 11047 list.all_of;
#X text 200 11047 checks if all list atoms accepted by predicate;
#X obj 30 11075 list.any_of;
#X text 200 11075 checks if at least one list element is accepted by
predicate;
#X obj 30 11103 list.append;
#X text 200 11103 append atom or list to the end of input list;
#X obj 30 11131 list.apply_to;
#X text 200 11131 modifies list value at specified position \, filtering
it via external object;
#X obj 30 11171 list.at;
#X text 200 11171 outputs list element(s) at specified index(es);
#X obj 30 11199 list.choice;
#X text 200 11199 outputs random element from list;
#X obj 30 11227 list.contains;
#X text 200 11227 checks if input list contains specified atoms;
#X obj 30 11255 list.convolve;
#X text 200 11255 convolution for lists;
#X obj 30 11283 list.correlate;
#X text 200 11283 list cross-correlation;
#X obj 30 11311 list.count;
#X text 200 11311 output the number of items that equal to specified
value;
#X obj 30 11339 list.count_if;
#X text 200 11339 output the number of items that satisfy to external
predicate;
#X obj 30 11367 list.delta;
#X text 200 11367 returns the difference between the current list of
floats and the previous one.;
#X obj 30 11407 list.distribution;
#X text 200 11407 list value distribution;
#X obj 30 11435 list.do;
#X text 200 11435 iterate and modify list contents via side-chain;
#X obj 30 11463 list.each;
#X text 200 11463 maps each list value via external side-chain;
#X obj 30 11491 list.enumerate;
#X text 200 11491 enumerates input list;
#X obj 30 11519 list.equal;
#X text 200 11519 checks if given lists are equal;
#X obj 30 11547 list.first;
#X text 200 11547 returns first list element;
#X obj 30 11575 list.gen;
#X text 200 11575 generates list of specified length via external generator;
#X obj 30 11603 list.histogram;
#X text 200 11603 outputs distribution histogram;
#X obj 30 11631 list.insert;
#X text 200 11631 insert atom or list to the specified position of
input list;
#X obj 30 11659 list.integrator;
#X text 200 11659 returns the sum of the previously stored list and
the current one then stores this sum;
#X obj 30 11699 list.last;
#X text 200 11699 output last list element;
#X obj 30 11727 list.length;
#X text 200 11727 output the number of atoms in the list;
#X obj 30 11755 list.map;
#X text 200 11755 map list values by specified dictionary;
#X obj 30 11783 list.max;
#X text 200 11783 output largest element in the list;
#X obj 30 11811 list.mean;
#X text 200 11811 calculates average of list of floats;
#X obj 30 11839 list.min;
#X text 200 11839 returns smallest element in the list;
#X obj 30 11867 list.none_of;
#X text 200 11867 checks if none of list atoms is accepted by predicate;
#X obj 30 11895 list.normalize;
#X text 200 11895 normalizes float list values to get their sum = 1.0;
#X obj 30 11923 list.pass;
#X text 200 11923 leave in list only specified elements;
#X obj 30 11951 list.pass_if;
#X text 200 11951 leave only elements accepted by predicate;
#X obj 30 11979 list.prepend;
#X text 200 11979 prepend atom or list before input list;
#X obj 30 12007 list.product;
#X text 200 12007 calculates product of floats in list;
#X obj 30 12035 list.range;
#X text 200 12035 output list smallest and largest value;
#X obj 30 12063 list.reduce;
#X text 200 12063 apply function of two arguments cumulatively to the
list;
#X obj 30 12091 list.reject;
#X text 200 12091 remove specified element from list;
#X obj 30 12119 list.remove;
#X text 200 12119 remove list element(s) at specified positions;
#X obj 30 12147 list.remove_if;
#X text 200 12147 remove elements by predicate;
#X obj 30 12175 list.repack;
#X text 200 12175 repack list to specified size;
#X obj 30 12203 list.repeat;
#X text 200 12203 output new list by repeating input list specified
times;
#X obj 30 12231 list.resample;
#X text 200 12231 resample list with specified ratio;
#X obj 30 12259 list.resize;
#X text 200 12259 changes list size;
#X obj 30 12287 list.reverse;
#X text 200 12287 reverses the order of the elements in the list;
#X obj 30 12315 list.rldecode;
#X text 200 12315 Run-length list decoder (RLE);
#X obj 30 12343 list.rlencode;
#X text 200 12343 RLE (run-length encoding) for lists;
#X obj 30 12371 list.rotate;
#X text 200 12371 rotates list;
#X obj 30 12399 list.route;
#X text 200 12399 acts like [route] but for lists;
#X obj 30 12427 list.rundiff;
#X text 200 12427 running difference;
#X obj 30 12455 list.runsum;
#X text 200 12455 running sum;
#X obj 30 12483 list.search;
#X text 200 12483 search specified items in input list;
#X obj 30 12511 list.separate;
#X text 200 12511 sends list elements one by one separately;
#X obj 30 12539 list.seq;
#X text 200 12539 numeric sequence list generator;
#X obj 30 12567 list.set;
#X text 200 12567 set list value at specified position;
#X obj 30 12595 list.shift;
#X text 200 12595 shifts the contents of the list with linear interpolation;
#X obj 30 12623 list.shuffle;
#X text 200 12623 randomly rearranges elements in list;
#X obj 30 12651 list.slice;
#X text 200 12651 extract sublist;
#X obj 30 12679 list.sort;
#X text 200 12679 sorts list values by ascending order;
#X obj 30 12707 list.sort_with;
#X text 200 12707 sort list with user defined side-chain;
#X obj 30 12735 list.split;
#X text 200 12735 splits list into two parts \, the length of first
list is specified by the argument;
#X obj 30 12775 list.stretch;
#X text 200 12775 stretches list - changes its size with linear interpolation;
#X obj 30 12803 list.sum;
#X text 200 12803 calculates sum of floats in list;
#X obj 30 12831 list.unique;
#X text 200 12831 removes duplicates from input list;
#X obj 30 12859 list.unpack;
#X text 200 12859 unpack list elements to separate outlets;
#X obj 30 12887 list.unzip;
#X text 200 12887 splits list to N lists \, each to separate output;
#X obj 30 12915 list.walk;
#X text 200 12915 Walks thru the list;
#X obj 30 12943 list.zip;
#X text 200 12943 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2 list2-2
etc.).;
#X obj 20 12998 cnv 5 48 32 empty empty live 4 16 0 17 -262144 -49933
0;
#X obj 20 13040 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13051 live.capture~;
#X text 200 13051 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 13091 cnv 5 58 32 empty empty local 4 16 0 17 -262144 -49933
0;
#X obj 20 13133 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13144 local.dict;
#X text 200 13144 local named dict object;
#X obj 30 13172 local.float;
#X text 200 13172 canvas-scoped named float variable;
#X obj 30 13200 local.int;
#X text 200 13200 canvas-scoped named integer variable;
#X obj 30 13228 local.list;
#X text 200 13228 local named list object;
#X obj 30 13256 local.mlist;
#X text 200 13256 local named mlist object;
#X obj 30 13284 local.set;
#X text 200 13284 local named set object;
#X obj 20 13312 cnv 5 49 32 empty empty math 4 16 0 17 -262144 -49933
0;
#X obj 20 13354 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13365 math.abs;
#X text 200 13365 absolute value function;
#X obj 30 13393 math.abs~;
#X text 200 13393 absolute value function for signals;
#X obj 30 13421 math.acos;
#X text 200 13421 arc cosine function;
#X obj 30 13449 math.acosh;
#X text 200 13449 inverse hyperbolic cosine function;
#X obj 30 13477 math.acosh~;
#X text 200 13477 hyperbolic arc cosine for signals;
#X obj 30 13505 math.acos~;
#X text 200 13505 arc cosine function for signals;
#X obj 30 13533 math.and;
#X text 200 13533 operation AND for multiple arguments;
#X obj 30 13561 math.approx;
#X text 200 13561 check if input value approximately equal to pattern;
#X obj 30 13589 math.asin;
#X text 200 13589 arc sine function;
#X obj 30 13617 math.asinh;
#X text 200 13617 inverse hyperbolic sine function;
#X obj 30 13645 math.asinh~;
#X text 200 13645 hyperbolic arc sine for signals;
#X obj 30 13673 math.asin~;
#X text 200 13673 arc sine for signals;
#X obj 30 13701 math.atan;
#X text 200 13701 arc tangent function;
#X obj 30 13729 math.atanh;
#X text 200 13729 inverse hyperbolic tangent function;
#X obj 30 13757 math.atanh~;
#X text 200 13757 hyperbolic arc tangent for signals;
#X obj 30 13785 math.atan~;
#X text 200 13785 arc tangent for signals;
#X obj 30 13813 math.binomial;
#X text 200 13813 binomial coefficient calculator;
#X obj 30 13841 math.cabs~;
#X text 200 13841 magnitude of a complex signals;
#X obj 30 13869 math.carg~;
#X text 200 13869 phase angle of a complex signals;
#X obj 30 13897 math.cbrt;
#X text 200 13897 cube root function;
#X obj 30 13925 math.cbrt~;
#X text 200 13925 cube root function for signals;
#X obj 30 13953 math.cdiv~;
#X text 200 13953 division of complex signals;
#X obj 30 13981 math.ceil;
#X text 200 13981 round to smallest integral value not less than input
value;
#X obj 30 14009 math.ceil~;
#X text 200 14009 round to smallest integral value not less than input
value;
#X obj 30 14037 math.cexp~;
#X text 200 14037 exponent of a complex signals;
#X obj 30 14065 math.cmul~;
#X text 200 14065 multiplication of complex signals;
#X obj 30 14093 math.cos;
#X text 200 14093 cosine function;
#X obj 30 14121 math.cosh;
#X text 200 14121 hyperbolic cosine function;
#X obj 30 14149 math.cosh~;
#X text 200 14149 hyperbolic cosine for signals;
#X obj 30 14177 math.cos~;
#X text 200 14177 cosine function;
#X obj 30 14205 math.div;
#X text 200 14205 division (on lists too);
#X obj 30 14233 math.e;
#X text 200 14233 mathematical constant \, base of the natural logarithm;
#X obj 30 14261 math.erf;
#X text 200 14261 error function;
#X obj 30 14289 math.erf~;
#X text 200 14289 error function for signals;
#X obj 30 14317 math.exp;
#X text 200 14317 exponential functions;
#X obj 30 14345 math.exp2;
#X text 200 14345 exponential functions;
#X obj 30 14373 math.exp2~;
#X text 200 14373 base-2 exponential for signal;
#X obj 30 14401 math.expr;
#X text 200 14401 dynamic [expr];
#X obj 30 14429 math.exp~;
#X text 200 14429 base-e exponential for signal;
#X obj 30 14457 math.floor;
#X text 200 14457 round to largest integral value not greater than
x;
#X obj 30 14485 math.floor~;
#X text 200 14485 round to largest integral value not greater than
x;
#X obj 30 14513 math.gamma;
#X text 200 14513 gamma function;
#X obj 30 14541 math.gamma~;
#X text 200 14541 gamma function for floating point signals;
#X obj 30 14569 math.gcd;
#X text 200 14569 calculate greatest common divisor;
#X obj 30 14597 math.inf;
#X text 200 14597 infinity value that cannot be represented accurately;
#X obj 30 14625 math.inf~;
#X text 200 14625 inifinity signal generator;
#X obj 30 14653 math.lcm;
#X text 200 14653 calculate least common multiple;
#X obj 30 14681 math.lgamma;
#X text 200 14681 natural logarithm of the absolute value of the gamma
function;
#X obj 30 14709 math.lgamma~;
#X text 200 14709 natural logarithm of the absolute value of the gamma
function for signals;
#X obj 30 14749 math.log;
#X text 200 14749 natural logarithm;
#X obj 30 14777 math.log10;
#X text 200 14777 logarithm functions;
#X obj 30 14805 math.log10~;
#X text 200 14805 natural logarithm;
#X obj 30 14833 math.log2;
#X text 200 14833 logarithm functions;
#X obj 30 14861 math.log2~;
#X text 200 14861 base-2 logarithm;
#X obj 30 14889 math.log~;
#X text 200 14889 natural logarithm;
#X obj 30 14917 math.mul;
#X text 200 14917 multiplication (on lists too);
#X obj 30 14945 math.nan;
#X text 200 14945 Not a Number \, unrepresentable value;
#X obj 30 14973 math.nan~;
#X text 200 14973 signal NaN;
#X obj 30 15001 math.neg;
#X text 200 15001 negate function;
#X obj 30 15029 math.or;
#X text 200 15029 operation OR for multiple arguments;
#X obj 30 15057 math.pi;
#X text 200 15057 mathematical constant;
#X obj 30 15085 math.pi~;
#X text 200 15085 mathematical constant;
#X obj 30 15113 math.polyeval;
#X text 200 15113 evaluates the polynomial described by the coefficients
list;
#X obj 30 15141 math.reciprocal;
#X text 200 15141 calculate reciprocal number;
#X obj 30 15169 math.reciprocal~;
#X text 200 15169 calculate reciprocal number for signals;
#X obj 30 15197 math.round;
#X text 200 15197 round to integral value \, regardless of rounding
direction;
#X obj 30 15225 math.round~;
#X text 200 15225 signal round;
#X obj 30 15253 math.sign;
#X text 200 15253 sign function;
#X obj 30 15281 math.sin;
#X text 200 15281 sine function;
#X obj 30 15309 math.sinh;
#X text 200 15309 hyperbolic sine function;
#X obj 30 15337 math.sinh~;
#X text 200 15337 hyperbolic sine for signals;
#X obj 30 15365 math.sin~;
#X text 200 15365 sine function;
#X obj 30 15393 math.sqrt;
#X text 200 15393 square root function;
#X obj 30 15421 math.sqrt~;
#X text 200 15421 square root for signal;
#X obj 30 15449 math.squared;
#X text 200 15449 value square;
#X obj 30 15477 math.squared~;
#X text 200 15477 signal value square;
#X obj 30 15505 math.sync_add;
#X text 200 15505 sync addition;
#X obj 30 15533 math.sync_and;
#X text 200 15533 sync logical AND operation;
#X obj 30 15561 math.sync_div;
#X text 200 15561 sync division;
#X obj 30 15589 math.sync_eq;
#X text 200 15589 sync equal numbers check;
#X obj 30 15617 math.sync_ge;
#X text 200 15617 sync greater equal numbers compare;
#X obj 30 15645 math.sync_gt;
#X text 200 15645 sync greater then numbers compare;
#X obj 30 15673 math.sync_le;
#X text 200 15673 sync less equal numbers compare;
#X obj 30 15701 math.sync_lshift;
#X text 200 15701 sync signed bit left shift;
#X obj 30 15729 math.sync_lt;
#X text 200 15729 sync less then numbers compare;
#X obj 30 15757 math.sync_mod;
#X text 200 15757 sync remainder of modulo division (float or integer);
#X obj 30 15785 math.sync_mul;
#X text 200 15785 sync multiplication;
#X obj 30 15813 math.sync_ne;
#X text 200 15813 sync numbers for not equality;
#X obj 30 15841 math.sync_or;
#X text 200 15841 sync logical OR operation;
#X obj 30 15869 math.sync_rshift;
#X text 200 15869 sync signed bit right shift;
#X obj 30 15897 math.sync_sub;
#X text 200 15897 sync subtraction;
#X obj 30 15925 math.sync_xor;
#X text 200 15925 sync logical XOR operation;
#X obj 30 15953 math.tan;
#X text 200 15953 tangent function;
#X obj 30 15981 math.tanh;
#X text 200 15981 hyperbolic tangent function;
#X obj 30 16009 math.tanh~;
#X text 200 16009 hyperbolic tangent for signals;
#X obj 30 16037 math.tan~;
#X text 200 16037 tangent function;
#X obj 30 16065 math.trunc;
#X text 200 16065 truncate to integer value;
#X obj 30 16093 math.trunc~;
#X text 200 16093 truncate to integer value;
#X obj 20 16121 cnv 5 49 32 empty empty midi 4 16 0 17 -262144 -49933
0;
#X obj 20 16163 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16174 midi.arp;
#X text 200 16174 MIDI arpeggiator;
#X obj 30 16202 midi.cc;
#X text 200 16202 enhanced version of vanilla ctlin;
#X obj 30 16230 midi.clock;
#X text 200 16230 midi clock toolbox;
#X obj 30 16258 midi.ctl2str;
#X text 200 16258 convert Standard MIDI Controllers number to name;
#X obj 30 16286 midi.event2ctl;
#X text 200 16286 convert MidiEvent message to controller channel/value
pair;
#X obj 30 16314 midi.event2note;
#X text 200 16314 convert MidiEvent message to midi note/velocity pair;
#X obj 30 16342 midi.event2prg;
#X text 200 16342 convert MidiEvent message to midi program change
value;
#X obj 30 16370 midi.file;
#X text 200 16370 standard midi file SMF reader and writer;
#X obj 30 16398 midi.kbd;
#X text 200 16398 computer keyboard midi;
#X obj 30 16426 midi.key2str;
#X text 200 16426 convert key number to SPN name according to tonality;
#X obj 30 16454 midi.modus;
#X text 200 16454 snap/skip midi pitches according modus;
#X obj 30 16482 midi.note.pass;
#X text 200 16482 midi note pass by expression;
#X obj 30 16510 midi.oct;
#X text 200 16510 midi octave transpose;
#X obj 30 16538 midi.prg2str;
#X text 200 16538 convert GM Instrument number to name (string or symbol);
#X obj 30 16566 midi.split;
#X text 200 16566 midi note splitter;
#X obj 30 16594 midi.sustain;
#X text 200 16594 sustain pedal emulation;
#X obj 30 16622 midi.sysex;
#X text 200 16622 sysex input messages as list;
#X obj 30 16650 midi.track;
#X text 200 16650 extract track from MidiFile;
#X obj 30 16678 midi.tuning;
#X text 200 16678 apply tuning to midi messages;
#X obj 30 16706 midi.vramp;
#X text 200 16706 apply crescendo or diminuendo for midi message flow;
#X obj 30 16734 midi.vrand;
#X text 200 16734 midi velocity randomizer;
#X obj 20 16762 cnv 5 49 32 empty empty misc 4 16 0 17 -262144 -49933
0;
#X obj 20 16804 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16815 click~;
#X text 200 16815 Output single impulse on bang;
#X obj 30 16843 fluid~;
#X text 200 16843 FluidSynth SoundFont 2 player;
#X obj 30 16871 modplug~;
#X text 200 16871 MOD file player (using libmodplug);
#X obj 30 16899 qrcode;
#X text 200 16899 QR code generator;
#X obj 30 16927 risset.gliss;
#X text 200 16927 Sheppard/Risset glissando calculator;
#X obj 30 16955 sfizz~;
#X text 200 16955 SFZ format sample player;
#X obj 30 16983 speech.flite;
#X text 200 16983 render speech to array;
#X obj 30 17011 speech.flite~;
#X text 200 17011 render speech to array;
#X obj 30 17039 speech.rhvoice~;
#X text 200 17039 RHVoice text to speech synthesis;
#X obj 20 17067 cnv 5 38 32 empty empty msg 4 16 0 17 -262144 -49933
0;
#X obj 20 17109 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17120 loadexpr;
#X text 200 17120 send message when patch loads;
#X obj 30 17148 msg;
#X text 200 17148 message constructor;
#X obj 30 17176 msg.after;
#X text 200 17176 send specified message after incoming message;
#X obj 30 17204 msg.onclose;
#X text 200 17204 send message when patch closes;
#X obj 30 17232 msg.onload;
#X text 200 17232 send message when patch loads;
#X obj 30 17260 msg.pack;
#X text 200 17260 message pack;
#X obj 30 17288 msg.sched;
#X text 200 17288 message scheduler;
#X obj 30 17316 msg.unpack;
#X text 200 17316 message unpack;
#X obj 20 17344 cnv 5 59 32 empty empty music 4 16 0 17 -262144 -49933
0;
#X obj 20 17386 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17397 rhythm.euclid;
#X text 200 17397 euclid pattern generator;
#X obj 30 17425 rhythm.hexbeat;
#X text 200 17425 hexbeat pattern generator;
#X obj 30 17453 rhythm.lsystem;
#X text 200 17453 L-system pattern generator;
#X obj 20 17481 cnv 5 37 32 empty empty net 4 16 0 17 -262144 -49933
0;
#X obj 20 17523 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17534 net.artnet.send;
#X text 200 17534 ArtNet DMX message sender;
#X obj 30 17562 net.freesound;
#X text 200 17562 Freesound API v2 client;
#X obj 30 17590 net.host2ip;
#X text 200 17590 returns IP address by DNS name;
#X obj 30 17618 net.http.client;
#X text 200 17618 HTTP client;
#X obj 30 17646 net.http.send;
#X text 200 17646 HTTP request sender;
#X obj 30 17674 net.mdns;
#X text 200 17674 MDNS service discovery;
#X obj 30 17702 net.mqtt.client;
#X text 200 17702 MQTT client;
#X obj 30 17730 net.osc.receive;
#X text 200 17730 OSC message listener;
#X obj 30 17758 net.osc.send;
#X text 200 17758 OSC message sender;
#X obj 30 17786 net.osc.server;
#X text 200 17786 OSC server control;
#X obj 30 17814 net.ws.client;
#X text 200 17814 Websocket client;
#X obj 30 17842 net.ws.server;
#X text 200 17842 Websocket server;
#X obj 20 17870 cnv 5 59 32 empty empty noise 4 16 0 17 -262144 -49933
0;
#X obj 20 17912 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 17923 noise.baker;
#X text 200 17923 Part of a-chaos library;
#X obj 30 17951 noise.clifford;
#X text 200 17951 clifford attractor;
#X obj 30 17979 noise.collatz;
#X text 200 17979 collatz conjecture output;
#X obj 30 18007 noise.colored~;
#X text 200 18007 colored noise generator with an arbitrary spectral
roll;
#X obj 30 18035 noise.crackle~;
#X text 200 18035 sparse noise generator;
#X obj 30 18063 noise.duffing;
#X text 200 18063 duffing attractor;
#X obj 30 18091 noise.ginger;
#X text 200 18091 Gingerbreadman map chaotic generator;
#X obj 30 18119 noise.henon;
#X text 200 18119 henon attractor;
#X obj 30 18147 noise.henon_heilles;
#X text 200 18147 Hénon–Heiles_system;
#X obj 30 18175 noise.henon_phase;
#X text 200 18175 henon phase Ddagrams;
#X obj 30 18203 noise.henonf;
#X text 200 18203 Henon phase;
#X obj 30 18231 noise.ikeda;
#X text 200 18231 Ikeda attractor;
#X obj 30 18259 noise.lfreq0~;
#X text 200 18259 sampled/held noise (piecewise constant);
#X obj 30 18287 noise.lfreq~;
#X text 200 18287 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 18315 noise.lorenz;
#X text 200 18315 Lorenz chaos;
#X obj 30 18343 noise.lyapunov;
#X text 200 18343 lyapunov random attractor;
#X obj 30 18371 noise.navier_stokes;
#X text 200 18371 navier-stokes diff equations;
#X obj 30 18399 noise.pink~;
#X text 200 18399 Pink noise generator;
#X obj 30 18427 noise.rossler;
#X text 200 18427 Rössler attractor;
#X obj 30 18455 noise.stein;
#X text 200 18455 Stein distribution;
#X obj 30 18483 noise.torus;
#X text 200 18483 torus attractor;
#X obj 30 18511 noise.verhulst;
#X text 200 18511 verhulst distribution;
#X obj 30 18539 noise.white~;
#X text 200 18539 White noise generator;
#X obj 20 18567 cnv 5 38 32 empty empty osc 4 16 0 17 -262144 -49933
0;
#X obj 20 18609 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18620 osc.blit~;
#X text 200 18620 Bandlimited impulse train oscillator;
#X obj 30 18648 osc.impulse~;
#X text 200 18648 Bandlimited impulse train generator;
#X obj 30 18676 osc.pulse~;
#X text 200 18676 Bandlimited pulse train oscillator;
#X obj 30 18704 osc.saw4~;
#X text 200 18704 Bandlimited sawtooth wave;
#X obj 30 18732 osc.saw~;
#X text 200 18732 Alias-free sawtooth wave;
#X obj 30 18760 osc.sinfb~;
#X text 200 18760 Sine oscilator with feedback;
#X obj 30 18788 osc.sin~;
#X text 200 18788 Sine wave oscillator;
#X obj 30 18816 osc.square~;
#X text 200 18816 Bandlimited square wave oscillator;
#X obj 30 18844 osc.tri~;
#X text 200 18844 Bandlimited triangle wave oscillator;
#X obj 20 18872 cnv 5 58 32 empty empty patch 4 16 0 17 -262144 -49933
0;
#X obj 20 18914 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 18925 canvas.active;
#X text 200 18925 checks if canvas window is on top and active;
#X obj 30 18953 canvas.current;
#X text 200 18953 verbose information about current canvas;
#X obj 30 18981 canvas.dir;
#X text 200 18981 current canvas directory and nesting level;
#X obj 30 19009 canvas.name;
#X text 200 19009 current canvas name;
#X obj 30 19037 canvas.path;
#X text 200 19037 current canvas fullpath;
#X obj 30 19065 canvas.top;
#X text 200 19065 verbose information about top-level canvas;
#X obj 30 19093 patch.args;
#X text 200 19093 Get patch or subpatch arguments;
#X obj 30 19121 patch.deps;
#X text 200 19121 patch dependencies: used objects and abstractions;
#X obj 30 19149 patch.tree;
#X text 200 19149 patch tree;
#X obj 20 19177 cnv 5 48 32 empty empty path 4 16 0 17 -262144 -49933
0;
#X obj 20 19219 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19230 file.size;
#X text 200 19230 output file size;
#X obj 30 19258 path.basename;
#X text 200 19258 outputs filename portion of pathname;
#X obj 30 19286 path.dirname;
#X text 200 19286 outputs directory portion of pathname;
#X obj 30 19314 path.exists;
#X text 200 19314 checks if given path exists;
#X obj 30 19342 path.file;
#X text 200 19342 file input/output;
#X obj 30 19370 path.is_dir;
#X text 200 19370 check if path is directory;
#X obj 30 19398 path.lsdir;
#X text 200 19398 list directory contents;
#X obj 30 19426 path.monitor;
#X text 200 19426 filesystem event monitor;
#X obj 30 19454 path.normalize;
#X text 200 19454 normalize file paths;
#X obj 30 19482 path.pattern;
#X text 200 19482 pattern filename generator;
#X obj 30 19510 path.search;
#X text 200 19510 file search;
#X obj 30 19538 path.split;
#X text 200 19538 file path split;
#X obj 20 19566 cnv 5 109 32 empty empty predicates 4 16 0 17 -262144
-49933 0;
#X obj 20 19608 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 19619 is_any;
#X text 200 19619 checks if input data has *any* type;
#X obj 30 19647 is_bang;
#X text 200 19647 checks if input data has *bang* type;
#X obj 30 19675 is_data;
#X text 200 19675 checks if input data has *data* type;
#X obj 30 19703 is_dict;
#X text 200 19703 checks if input data has *dict* type;
#X obj 30 19731 is_even;
#X text 200 19731 checks if input number is even;
#X obj 30 19759 is_file;
#X text 200 19759 checks if file exists and accessible;
#X obj 30 19787 is_float;
#X text 200 19787 checks if input data has *float* type;
#X obj 30 19815 is_list;
#X text 200 19815 checks if input data has *list* type;
#X obj 30 19843 is_odd;
#X text 200 19843 checks if input number is odd;
#X obj 30 19871 is_pointer;
#X text 200 19871 checks if input data has *pointer* type;
#X obj 30 19899 is_prop;
#X text 200 19899 checks if input message is *property* message;
#X obj 30 19927 is_symbol;
#X text 200 19927 checks if input data has *symbol* type;
#X obj 20 19955 cnv 5 68 32 empty empty preset 4 16 0 17 -262144
-49933 0;
#X obj 20 19997 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 20008 preset.float;
#X text 200 20008 load/store float preset;
#X obj 30 20036 preset.list;
#X text 200 20036 load/store symbol preset;
#X obj 30 20064 preset.storage;
#X text 200 20064 preset storage control;
#X obj 30 20092 preset.symbol;
#X text 200 20092 load/store symbol preset;
#X obj 20 20120 cnv 5 90 32 empty empty property 4 16 0 17 -262144
-49933 0;
#X obj 20 20162 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 20173 patch.props;
#X text 200 20173 patch properties manager;
#X obj 30 20201 prop;
#X text 200 20201 get/set named property value for subpatch or abstraction;
#X obj 30 20229 prop.declare;
#X text 200 20229 declare named property for subpatch or abstraction;
#X obj 30 20257 prop.get;
#X text 200 20257 get property from connected object/subpatch/abstraction;
#X obj 30 20285 prop.join;
#X text 200 20285 join property to main data flow;
#X obj 30 20313 prop.random;
#X text 200 20313 property randomizer;
#X obj 30 20341 prop.route;
#X text 200 20341 separate properties from dataflow;
#X obj 30 20369 prop.route~;
#X text 200 20369 Property extractor from audio streams;
#X obj 30 20397 prop.set;
#X text 200 20397 set property for connected object/subpatch/abstraction;
#X obj 20 20425 cnv 5 58 32 empty empty proto 4 16 0 17 -262144 -49933
0;
#X obj 20 20467 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 20478 proto.arturia.minilab;
#X text 200 20478 simple SysEx control for Arturia MiniLab;
#X obj 30 20506 proto.feelworld;
#X text 200 20506 protocol for FeelWorld LivePro L1 HDMI mixer;
#X obj 30 20534 proto.firmata;
#X text 200 20534 Firmata Arduino protocol support;
#X obj 30 20562 proto.inscore;
#X text 200 20562 INScore message creator;
#X obj 30 20590 proto.ltc.in~;
#X text 200 20590 LTC decoder;
#X obj 30 20618 proto.ltc.out~;
#X text 200 20618 LTC encoder;
#X obj 30 20646 proto.midi;
#X text 200 20646 raw midi encoder/parser;
#X obj 30 20674 proto.midi.casio;
#X text 200 20674 Casio Privia MIDI control;
#X obj 30 20702 proto.midi.cc;
#X text 200 20702 raw midi CC encoder/parser;
#X obj 30 20730 proto.midi.sysex;
#X text 200 20730 raw midi SYSex encoder/parser;
#X obj 30 20758 proto.moppy;
#X text 200 20758 protocol for Musical flOPPY controller;
#X obj 30 20786 proto.morse;
#X text 200 20786 Morse encoder;
#X obj 30 20814 proto.mpv;
#X text 200 20814 mpv video player control;
#X obj 30 20842 proto.obs;
#X text 200 20842 OBS studio Web-Socket client;
#X obj 30 20870 proto.sp.alpaca;
#X text 200 20870 protocol parser for Arduino-based CEAMMC footswitch;
#X obj 30 20898 proto.vlc;
#X text 200 20898 VLC video player control over HTTP;
#X obj 30 20926 proto.whammy;
#X text 200 20926 Control for Digitech Whammy pedal;
#X obj 30 20954 proto.xtouch_ext;
#X text 200 20954 Behringer XTouch Extender XMidi protocol;
#X obj 20 20982 cnv 5 68 32 empty empty random 4 16 0 17 -262144
-49933 0;
#X obj 20 21024 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 21035 random.atom;
#X text 200 21035 weighted atom generation from specified list;
#X obj 30 21063 random.discrete;
#X text 200 21063 random weighted integers on interval [0 \, n);
#X obj 30 21091 random.float;
#X text 200 21091 uniform random float generator in specified range;
#X obj 30 21119 random.gauss;
#X text 200 21119 gaussian random distribution;
#X obj 30 21147 random.int;
#X text 200 21147 uniform random integer generator in specified range;
#X obj 30 21175 random.linear;
#X text 200 21175 random linear distribution;
#X obj 30 21203 random.pw_const;
#X text 200 21203 piecewise constant random distribution;
#X obj 30 21231 random.pw_lin;
#X text 200 21231 piecewise linear random distribution;
#X obj 20 21259 cnv 5 48 32 empty empty samp 4 16 0 17 -262144 -49933
0;
#X obj 20 21301 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 21312 samp.time~;
#X text 200 21312 sample counter;
#X obj 20 21340 cnv 5 37 32 empty empty seq 4 16 0 17 -262144 -49933
0;
#X obj 20 21382 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 21393 seq.arp;
#X text 200 21393 sequence arpeggiator;
#X obj 30 21421 seq.bangs;
#X text 200 21421 bang sequencer;
#X obj 30 21449 seq.counter;
#X text 200 21449 sequencer counter;
#X obj 30 21477 seq.life;
#X text 200 21477 Conway game of life sequencer;
#X obj 30 21505 seq.matrix;
#X text 200 21505 sequencer control for ui.matrix;
#X obj 30 21533 seq.nbangs;
#X text 200 21533 output specified number of bang with time intervals;
#X obj 30 21561 seq.phasor;
#X text 200 21561 control rate phasor (saw) generator;
#X obj 30 21589 seq.toggles;
#X text 200 21589 toggle sequencer;
#X obj 30 21617 sequencer;
#X text 200 21617 basic sequence player;
#X obj 20 21645 cnv 5 37 32 empty empty snd 4 16 0 17 -262144 -49933
0;
#X obj 20 21687 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 21698 snd.file;
#X text 200 21698 Sound file loader on steroids;
#X obj 30 21726 snd.play~;
#X text 200 21726 Sound file player on steriods;
#X obj 20 21754 cnv 5 48 32 empty empty spat 4 16 0 17 -262144 -49933
0;
#X obj 20 21796 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 21807 hoa.2d.decoder~;
#X text 200 21807 hoa 2d decoder;
#X obj 30 21835 hoa.2d.encoder~;
#X text 200 21835 hoa 2d encoder;
#X obj 30 21863 hoa.2d.exchanger~;
#X text 200 21863 renumbers and normalizes the channels;
#X obj 30 21891 hoa.2d.map~;
#X text 200 21891 a 2d ambisonic multisource spatializer;
#X obj 30 21919 hoa.2d.optim~;
#X text 200 21919 a 2D ambisonic optimization tool;
#X obj 30 21947 hoa.2d.projector~;
#X text 200 21947 a plane waves decomposer from circular harmonics
domain;
#X obj 30 21975 hoa.2d.recomposer~;
#X text 200 21975 recomposes a 2d plane wave decomposition into circular
harmonics;
#X obj 30 22015 hoa.2d.rotate~;
#X text 200 22015 a 2D ambisonic sound field rotation;
#X obj 30 22046 ui.link @title [hoa.2d.space] @url
hoa.2d.space-help.pd;
#X text 200 22043 planewaves amp control;
#X obj 30 22068 hoa.2d.wider~;
#X text 200 22068 a 2d fractional ambisonic order simulator;
#X obj 30 22096 hoa.3d.decoder~;
#X text 200 22096 hoa 3d decoder;
#X obj 30 22124 hoa.3d.encoder~;
#X text 200 22124 hoa 3d encoder;
#X obj 30 22152 hoa.3d.exchanger~;
#X text 200 22152 renumbers and normalizes the channels;
#X obj 30 22180 hoa.3d.map~;
#X text 200 22180 a 3d ambisonic multisource spatializer;
#X obj 30 22211 ui.link @title [hoa.3d.meter~] @url
hoa.3d.meter~-help.pd;
#X text 200 22208 multi spherical meter with sound field descriptor;
#X obj 30 22233 hoa.3d.optim~;
#X text 200 22233 a 3D ambisonic optimization tool;
#X obj 30 22264 ui.link @title [hoa.3d.scope~] @url
hoa.3d.scope~-help.pd;
#X text 200 22261 a 3d ambisonic harmonic scope;
#X obj 30 22286 hoa.3d.wider~;
#X text 200 22286 a 3d fractional ambisonic order simulator;
#X obj 30 22314 hoa.@process;
#X text 200 22314 process properties manager for hoa.process~;
#X obj 30 22342 hoa.in;
#X text 200 22342 message inlet for a patcher loaded by hoa.process~;
#X obj 30 22370 hoa.in~;
#X text 200 22370 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 22401 ui.link @title [hoa.map.ui] @url hoa.map.ui-help.pd;
#X text 200 22398 a GUI to spatialize sources on a map;
#X obj 30 22423 hoa.out;
#X text 200 22423 message outlet for a patcher loaded by hoa.process~;
#X obj 30 22451 hoa.out~;
#X text 200 22451 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 22479 hoa.process~;
#X text 200 22479 patcher loader for multichannel processing;
#X obj 30 22510 ui.link @title [hoa.scope~] @url hoa.scope~-help.pd;
#X text 200 22507 a 2d ambisonic harmonic scope;
#X obj 30 22532 pan.cos~;
#X text 200 22532 two channel equal power sine/cosine panner;
#X obj 30 22560 pan.linsig~;
#X text 200 22560 two channel linear panner with signal control;
#X obj 30 22588 pan.lin~;
#X text 200 22588 two channel linear panner;
#X obj 30 22616 pan.spread~;
#X text 200 22616 spreads input channels across the stereo field;
#X obj 30 22644 pan.sqrt~;
#X text 200 22644 two channel equal power square root panner;
#X obj 30 22672 spat.pan4~;
#X text 200 22672 GMEM SPAT: 4-outputs spatializer;
#X obj 30 22700 spat.pan8~;
#X text 200 22700 GMEM SPAT: 8-outputs spatializer;
#X obj 30 22728 spat.zita6x8~;
#X text 200 22728 spat with 6 inputs sources to 8 channel output;
#X obj 30 22756 spat.zita8~;
#X text 200 22756 8 channel reverb spatializer;
#X obj 20 22784 cnv 5 68 32 empty empty string 4 16 0 17 -262144
-49933 0;
#X obj 20 22826 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 22837 string;
#X text 200 22837 string constructor;
#X obj 30 22865 string.contains;
#X text 200 22865 checks if string contains specified substring;
#X obj 30 22893 string.ends_with;
#X text 200 22893 checks if string ends with specified substring;
#X obj 30 22921 string.equal;
#X text 200 22921 check strings or symbols for equality;
#X obj 30 22949 string.format;
#X text 200 22949 formats string like printf.;
#X obj 30 22977 string.join;
#X text 200 22977 joins (concatenates) list to string with separator;
#X obj 30 23005 string.length;
#X text 200 23005 number of characters in string (unicode supported);
#X obj 30 23033 string.match;
#X text 200 23033 check if string match regular expression;
#X obj 30 23061 string.remove;
#X text 200 23061 remove substring from input string;
#X obj 30 23089 string.replace;
#X text 200 23089 replace from one substring to another in input string;
#X obj 30 23117 string.split;
#X text 200 23117 split string or symbol by separator;
#X obj 30 23145 string.starts_with;
#X text 200 23145 checks if string starts with specified substring;
#X obj 30 23173 string.substr;
#X text 200 23173 extract substring from input string;
#X obj 30 23201 string2symbol;
#X text 200 23201 converts string to symbol;
#X obj 20 23229 cnv 5 69 32 empty empty symbol 4 16 0 17 -262144
-49933 0;
#X obj 20 23271 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 23282 symbol.equal;
#X text 200 23282 check symbols for equality;
#X obj 30 23310 symbol.length;
#X text 200 23310 number of characters in symbol (unicode supported);
#X obj 30 23338 symbol.num_compare;
#X text 200 23338 numeric symbol compare;
#X obj 30 23366 symbol2any;
#X text 200 23366 converts symbol or string to message;
#X obj 30 23394 symbol2intlist;
#X text 200 23394 converts symbol to list of character codes;
#X obj 20 23422 cnv 5 58 32 empty empty synth 4 16 0 17 -262144 -49933
0;
#X obj 20 23464 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 23475 noise.chua~;
#X text 200 23475 Chua's diode circuit;
#X obj 30 23503 synth.bee3~;
#X text 200 23503 Hammond-oid organ FM synthesis instrument;
#X obj 30 23531 synth.birds~;
#X text 200 23531 bird singing generator;
#X obj 30 23559 synth.church_bell~;
#X text 200 23559 generic church bell modal model;
#X obj 30 23587 synth.clap~;
#X text 200 23587 clap synth from faust libraries;
#X obj 30 23615 synth.dubdub~;
#X text 200 23615 simple synth based on a sawtooth wave filtered by
a resonant lowpass;
#X obj 30 23655 synth.dx7~;
#X text 200 23655 FAUST dx7 implementation;
#X obj 30 23683 synth.eguitar~;
#X text 200 23683 simple electric guitar model with steel strings;
#X obj 30 23711 synth.english_bell~;
#X text 200 23711 english church bell modal model;
#X obj 30 23739 synth.fgrain~;
#X text 200 23739 file granulator from STK;
#X obj 30 23767 synth.french_bell~;
#X text 200 23767 french church bell modal model;
#X obj 30 23795 synth.german_bell~;
#X text 200 23795 german church bell modal model;
#X obj 30 23823 synth.glass_harm~;
#X text 200 23823 nonlinear banded waveguide modeled Glass Harmonica;
#X obj 30 23851 synth.glitch~;
#X text 200 23851 Glitch synthesizer by naivesound;
#X obj 30 23879 synth.harpsichord~;
#X text 200 23879 waveguide commuted harpsichord;
#X obj 30 23907 synth.hat~;
#X text 200 23907 hi-hat synth from faust librariest;
#X obj 30 23935 synth.kick2~;
#X text 200 23935 low-kick synth from faust librariest;
#X obj 30 23963 synth.kick~;
#X text 200 23963 low-kick synth from Guitarix project;
#X obj 30 23991 synth.ks~;
#X text 200 23991 Karplus-Strong string;
#X obj 30 24019 synth.marimba~;
#X text 200 24019 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 24059 synth.metro~;
#X text 200 24059 ready to use metronome synth;
#X obj 30 24087 synth.piano~;
#X text 200 24087 waveguide commuted piano;
#X obj 30 24115 synth.rhodey~;
#X text 200 24115 STK Fender Rhodes electric piano FM synthesis instrument;
#X obj 30 24143 synth.risset_arp~;
#X text 200 24143 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 24171 synth.risset_bell~;
#X text 200 24171 Jean Claude Risset's bell synth;
#X obj 30 24199 synth.risset_tone~;
#X text 200 24199 Jean Claude Risset's endless glissando;
#X obj 30 24227 synth.russian_bell~;
#X text 200 24227 russian church bell modal model;
#X obj 30 24255 synth.shakers~;
#X text 200 24255 various percussion sounds from STK library;
#X obj 30 24283 synth.sitar~;
#X text 200 24283 STK sitar;
#X obj 30 24311 synth.snare~;
#X text 200 24311 Snare drum synth from Guitarix project;
#X obj 30 24339 synth.standard_bell~;
#X text 200 24339 german church bell modal model;
#X obj 30 24367 synth.tube_bell~;
#X text 200 24367 STK tubular bell (orchestral chime) FM synthesis
instrument;
#X obj 30 24395 synth.voice_fofc~;
#X text 200 24395 Simple formant/vocal synthesizer with FOF-cycle filterbank.;
#X obj 30 24423 synth.voice_fofs~;
#X text 200 24423 Simple formant/vocal synthesizer with FOF-smooth
filterbank.;
#X obj 30 24451 synth.wurley~;
#X text 200 24451 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 24479 cnv 5 69 32 empty empty system 4 16 0 17 -262144
-49933 0;
#X obj 20 24521 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 24532 system.colorpanel;
#X text 200 24532 System color panel dialog popup;
#X obj 30 24560 system.command;
#X text 200 24560 run commands with pipes on Unix and Windows;
#X obj 30 24588 system.cursor;
#X text 200 24588 Output cursor motion \, mousewheel and button clicks;
#X obj 30 24616 system.exec;
#X text 200 24616 run external command in separate process;
#X obj 30 24644 system.exit;
#X text 200 24644 quit PureData;
#X obj 30 24672 system.getenv;
#X text 200 24672 Get system environment variables;
#X obj 30 24700 system.hostname;
#X text 200 24700 outputs system hostname;
#X obj 30 24728 system.info;
#X text 200 24728 retrieve system information;
#X obj 30 24756 system.memsize;
#X text 200 24756 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 24796 system.memused;
#X text 200 24796 returns the process physical memory use - current
and peak;
#X obj 30 24824 system.screen_size;
#X text 200 24824 returns current screen size in pixels;
#X obj 20 24852 cnv 5 28 32 empty empty tl 4 16 0 17 -262144 -49933 0;
#X obj 20 24894 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 24905 tl.bang;
#X text 200 24905 Timeline bang (with possible delay);
#X obj 30 24936 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 200 24933 Timeline section;
#X obj 30 24958 tl.timeline;
#X text 200 24958 Timeline - event scheduler;
#X obj 30 24986 tl.toggle;
#X text 200 24986 Timeline bang;
#X obj 30 25014 tl.transport;
#X text 200 25014 Timeline transport control;
#X obj 20 25042 cnv 5 28 32 empty empty ui 4 16 0 17 -262144 -49933 0;
#X obj 20 25084 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 25098 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 200 25095 array view with cursor and selection;
#X obj 30 25123 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 200 25120 A bang... that's all;
#X obj 30 25148 ui.link @title [ui.button] @url ui.button-help.pd;
#X text 200 25145 button widget;
#X obj 30 25173 ui.link @title [ui.canvas] @url ui.canvas-help.pd;
#X text 200 25170 UI canvas for drawing;
#X obj 30 25198 ui.link @title [ui.cmeter~] @url ui.cmeter~-help.pd;
#X text 200 25195 Multichannel circular peak and rms signal meter;
#X obj 30 25223 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 200 25220 colorchooser widget;
#X obj 30 25248 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 200 25245 Display GUI object;
#X obj 30 25273 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 200 25270 GUI for turning DSP on/off;
#X obj 30 25298 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 200 25295 envelope editor widget;
#X obj 30 25323 ui.link @title [ui.filter] @url ui.filter-help.pd;
#X text 200 25320 UI filter object calculator for biquad filter;
#X obj 30 25348 ui.link @title [ui.filter~] @url ui.filter~-help.pd;
#X text 200 25345 UI filter object based on biquad filter;
#X obj 30 25373 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 200 25370 UI stereo gain control;
#X obj 30 25398 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 200 25395 UI gain control;
#X obj 30 25423 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 200 25420 simple icon with button capabilities;
#X obj 30 25448 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 200 25445 value increment/decrement;
#X obj 30 25473 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 200 25470 keyboard widget;
#X obj 30 25498 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 200 25495 knob widget;
#X obj 30 25523 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 200 25520 simple label widget;
#X obj 30 25548 ui.link @title [ui.lcd] @url ui.lcd-help.pd;
#X text 200 25545 black and white bitmap display;
#X obj 30 25573 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 200 25570 Hyperlink widget;
#X obj 30 25598 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 200 25595 The matrix of toggles has you.;
#X obj 30 25623 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 200 25620 Dropdown menu;
#X obj 30 25648 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 200 25645 Shows peak and rms signal level;
#X obj 30 25673 ui.link @title [ui.midi] @url ui.midi-help.pd;
#X text 200 25670 incoming MIDI message viewport;
#X obj 30 25698 ui.link @title [ui.mouse_filter] @url
ui.mouse_filter-help.pd;
#X text 200 25695 filter mouse events from ui objects;
#X obj 30 25723 ui.link @title [ui.mouse_route] @url
ui.mouse_route-help.pd;
#X text 200 25720 routes mouse events from ui objects;
#X obj 30 25748 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 200 25745 counterpart of the vanilla [nbx];
#X obj 30 25773 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 200 25770 counterpart of the vanilla [nbx] for signal;
#X obj 30 25798 ui.link @title [ui.plot~] @url ui.plot~-help.pd;
#X text 200 25795 signal plotter;
#X obj 30 25823 ui.link @title [ui.polar] @url ui.polar-help.pd;
#X text 200 25820 2D slider in polar coordinates;
#X obj 30 25848 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 200 25845 Preset manager;
#X obj 30 25873 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 200 25870 counterpart of the vanilla radio toggle;
#X obj 30 25898 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 200 25895 range slider;
#X obj 30 25923 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 200 25920 Scope GUI object;
#X obj 30 25948 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 200 25945 counterpart of the vanilla slider;
#X obj 30 25973 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 200 25970 2D slider widget;
#X obj 30 25998 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 200 25995 Multiple slider widget;
#X obj 30 26023 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 200 26020 Spectroscope GUI object;
#X obj 30 26048 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 200 26045 displays a list of text buttons or text toggles;
#X obj 30 26073 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 200 26070 modern toggle widget;
#X obj 1 1 cnv 5 740 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 26095 cnv 5 740 80 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 26095 version: v0.9.7 \, license: GPL3;
#X obj 20 26123 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;
#X obj 20 26147 ui.link @title Generated with pddoc v0.7.8 @url
http://github.com/uliss/pddoc;
#X obj 670 26110 loadmsg 0;
#X obj 670 26145 switch~;
#X connect 1776 0 1777 0;